package com.codlex.jsms.server;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectInputStream.GetField;
import java.net.ServerSocket;
import java.net.Socket;

import com.codlex.jsms.networking.MSGCode;
import com.codlex.jsms.networking.Message;
import com.codlex.jsms.networking.User;
import com.codlex.jsms.networking.messages.AuthMessage;
import com.codlex.jsms.networking.messages.AuthMessageFailed;
import com.codlex.jsms.networking.messages.AuthMessageSuccess;

import static com.codlex.jsms.server.users.UserService.*;
import static com.codlex.jsms.networking.MSGCode.*;

/**
 * AuthServer je napravljen da prima konekcije od neprijavljenih 
 * korisnika na sistem i da im vraca poruku u obliku uspeha ili 
 * neuspeha, sa tokenom odnosno bez njega respektivno. 
 * 
 * @author Dejan Pekter <deximat@gmail.com>
 *
 */
public class AuthServer {
	private static final int port = 1337;
	
	public static void main(String[] args) {
		try {
			ServerSocket server = new ServerSocket(port);
			
			while(true) {
				Socket socket = server.accept();
				ObjectInputStream input = new ObjectInputStream(socket.getInputStream());
				Message message = (Message) input.readObject();
				
			}
		} catch (IOException e) {
			System.out.println("Nije moguce otvoriti server na zadatom portu.");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private Message processMessage(Message m) {
		User user = null;
		switch (m.getMsgCode()) {
		case AUTH:
			User user = (User) m.getMsgObject();
			String token = getUserService().login(user);
			if(token == null) {
				return new AuthMessageFailed();				
			}
			return new AuthMessageSuccess(token);
		case REGISTER:
			User user = (User) m.getMsgObject();
			String token = getUserService().login(user);
			if(token == null) {
				return new AuthMessageFailed();				
			}
			return new AuthMessageSuccess(token);
			
		}
		
	}
	
	
}
